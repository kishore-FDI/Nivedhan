/* eslint-disable prefer-const */ /** * Note: Use position fixed according to your needs * Desktop navbar is better positioned at the bottom * Mobile navbar is better positioned at bottom right. **/ import { cn } from "@/lib/util"; // import { IconLayoutNavbarCollapse } from "@tabler/icons-react"; import { AnimatePresence, MotionValue, motion, useMotionValue, useSpring, useTransform, } from "framer-motion"; import Link from "next/link"; import { useEffect, useRef, useState } from "react"; import React from "react"; import { // IconBrandGithub, // IconBrandX, // IconExchange, IconHome, IconNewSection, IconTerminal2, } from "@tabler/icons-react"; import Image from "next/image"; export const FloatingDock = ({ items, desktopClassName, // mobileClassName, }: { items: { title: string; icon: React.ReactNode; href: string }[]; desktopClassName?: string; mobileClassName?: string; }) => { return ( <> <FloatingDockDesktop items={items} className={desktopClassName} /> {/* <FloatingDockMobile items={items} className={mobileClassName} /> */} </> ); }; // const FloatingDockMobile = ({ //   items, //   className, // }: { //   items: { title: string; icon: React.ReactNode; href: string }[]; //   className?: string; // }) => { //   const [open, setOpen] = useState(false); //   return ( //     <div className={cn("relative block md:hidden", className)}> //       <AnimatePresence> //         {open && ( //           <motion.div //             layoutId="nav" //             className="absolute bottom-full mb-2 inset-x-0 flex flex-col gap-2" //           > //             {items.map((item, idx) => ( //               <motion.div //                 key={item.title} //                 initial={{ opacity: 0, y: 10 }} //                 animate={{ //                   opacity: 1, //                   y: 0, //                 }} //                 exit={{ //                   opacity: 0, //                   y: 10, //                   transition: { //                     delay: idx * 0.05, //                   }, //                 }} //                 transition={{ delay: (items.length - 1 - idx) * 0.05 }} //               > //                 <Link //                   href={item.href} //                   key={item.title} //                   className="h-10 w-10 rounded-full bg-gray-50 dark:bg-neutral-900 flex items-center justify-center" //                 > //                   <div className="h-4 w-4">{item.icon}</div> //                 </Link> //               </motion.div> //             ))} //           </motion.div> //         )} //       </AnimatePresence> //       <button //         onClick={() => setOpen(!open)} //         className="h-10 w-10 rounded-full bg-gray-50 dark:bg-neutral-100 flex items-center justify-center" //       > //         <IconLayoutNavbarCollapse className="h-5 w-5 text-neutral-9 00 dark:text-neutral-400" /> //       </button> //     </div> //   ); // }; const FloatingDockDesktop = ({ items, className, }: { items: { title: string; icon: React.ReactNode; href: string }[]; className?: string; }) => { let mouseX = useMotionValue(Infinity); const [animate, setAnimate] = useState(false); const [showLinks, setShowLinks] = useState(false); useEffect(() => { setTimeout(() => { setAnimate(true); setTimeout(() => { setShowLinks(true); }, 1500); }, 1000); }, []); return ( <div className="flex justify-center"> <motion.div onMouseMove={(e) => mouseX.set(e.pageX)} onMouseLeave={() => mouseX.set(Infinity)} initial={{ opacity: 1, width: '100vw', height: '100vh', position: 'fixed', top: 0, left: -10, // transformOrigin: 'center center', scale: 1 }} animate={{ width: showLinks ? '20rem' : animate ? '4rem' : '100vw', height: animate ? '4rem' : '100vh', borderRadius: animate ? '9999px' : '0px', position: showLinks ? '' : 'fixed', top: !showLinks && animate ? '61%' : 0, left: !showLinks && animate ? '48%' : 0, x: !showLinks && animate ? '-50%' : 0, y: !showLinks && animate ? '-50%' : 0, scale: animate ? 0.8 : 1 }} transition={{ duration: 1, ease: [0.22, 1, 0.36, 1], scale: { duration: 0.8 }, width: { duration: 0.8 }, height: { duration: 0.8 }, borderRadius: { duration: 0.8 } }} className={cn( "flex items-center justify-center bg-gray-800 dark:bg-neutral-900", animate && !showLinks && "overflow-hidden", showLinks && "px-4", className )} > {showLinks ? ( <motion.div initial={{ opacity: 0, scale: 0.8 }} animate={{ opacity: 1, scale: 1 }} transition={{ duration: 0.8, ease: [0.19, 1, 0.22, 1], delay: 0.2 }} className="flex gap-4 items-center justify-center" > {items.map((item) => ( <IconContainer mouseX={mouseX} key={item.title} {...item} /> ))} </motion.div> ) : ( <motion.div className="flex items-center justify-center h-full w-full" initial={{ opacity: 1 }} animate={{ opacity: animate ? 0 : 1, scale: animate ? 0.8 : 1 }} transition={{ duration: 0.8, ease: [0.19, 1, 0.22, 1] }} > <p className="text-center text-3xl text-neutral-200"> Want Better Quality Steel Products? </p> </motion.div> )} </motion.div> </div> ); }; function IconContainer({ mouseX, title, icon, href, }: { mouseX: MotionValue; title: string; icon: React.ReactNode; href: string; }) { let ref = useRef<HTMLDivElement>(null); let distance = useTransform(mouseX, (val) => { let bounds = ref.current?.getBoundingClientRect() ?? { x: 0, width: 0 }; return val - bounds.x - bounds.width / 2; }); let widthTransform = useTransform(distance, [-150, 0, 150], [40, 80, 40]); let heightTransform = useTransform(distance, [-150, 0, 150], [40, 80, 40]); let widthTransformIcon = useTransform(distance, [-150, 0, 150], [20, 40, 20]); let heightTransformIcon = useTransform( distance, [-150, 0, 150], [20, 40, 20] ); let width = useSpring(widthTransform, { mass: 0.1, stiffness: 150, damping: 12, }); let height = useSpring(heightTransform, { mass: 0.1, stiffness: 150, damping: 12, }); let widthIcon = useSpring(widthTransformIcon, { mass: 0.1, stiffness: 150, damping: 12, }); let heightIcon = useSpring(heightTransformIcon, { mass: 0.1, stiffness: 150, damping: 12, }); const [hovered, setHovered] = useState(false); return ( <Link href={href}> <motion.div ref={ref} style={{ width, height }} onMouseEnter={() => setHovered(true)} onMouseLeave={() => setHovered(false)} className="aspect-square rounded-full bg-gray-800 dark:bg-neutral-900 flex items-center justify-center relative" > <AnimatePresence> {hovered && ( <motion.div initial={{ opacity: 0, y: 10, x: "-50%" }} animate={{ opacity: 1, y: 0, x: "-50%" }} exit={{ opacity: 0, y: 2, x: "-50%" }} className="px-2 py-0.5 whitespace-pre rounded-md bg-gray-100 border dark:bg-neutral-800 dark:border-neutral-900 dark:text-white border-gray-200 text-neutral-700 absolute left-1/2 -translate-x-1/2 -top-8 w-fit text-xs" > {title} </motion.div> )} </AnimatePresence> <motion.div style={{ width: widthIcon, height: heightIcon }} className="flex items-center justify-center" > {icon} </motion.div> </motion.div> </Link> ); } export function FloatingDockDemo() { const links = [ { title: "Home", icon: ( <IconHome className="h-full w-full text-neutral-500 dark:text-neutral-300" /> ), href: "#", }, { title: "Products", icon: ( <IconTerminal2 className="h-full w-full text-neutral-500 dark:text-neutral-300" /> ), href: "#", }, { title: "Components", icon: ( <IconNewSection className="h-full w-full text-neutral-500 dark:text-neutral-300" /> ), href: "#", }, { title: "Aceternity UI", icon: ( <Image src="https://assets.aceternity.com/logo-dark.png" width={20} height={20} alt="Aceternity Logo" /> ), href: "#", }, ]; return ( <div className="flex items-center justify-center h-[5rem] w-full mt-5"> <FloatingDock mobileClassName="translate-y-20" // only for demo, remove for production items={links} /> </div> ); }